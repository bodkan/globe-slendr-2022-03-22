---
title: "_slendr_ crash course"
subtitle: "simulation tutorial at Globe"
author: "Martin Petr"
date: "March 2023"
date-format: "MMMM YYYY"
format:
  revealjs:
    eval: true
    echo: true
    code-line-numbers: false
    fig-align: center
    slide-number: true
  # html:
  #   eval: true
  #   echo: true
  #   code-line-numbers: false
  #   fig-align: center
# execute:
#   cache: true
---

# 

::: columns
::: {.column width="70%"}
> Many problems in population genetics cannot be solved by a mathematician, no matter how gifted. \[It is\] clear that computer methods are very powerful. This is good. It \[...\] permits people with limited mathematical knowledge to work on important problems \[...\]
:::

::: {.column width="30%"}
![](images/crow.jpeg)

[James F. Crow](https://en.wikipedia.org/wiki/James_F._Crow) -- [interview](http://www.gnxp.com/blog/2006/06/10-questions-for-jim-crow.php)
:::
:::

# Why use simulations?

1.  Making sense of estimated statistics
2.  Fitting model parameters
3.  Ground truth for method work

## Making sense of estimated statistics

<center>![](images/elephants.png){width="65%"}</center>

::: aside
[Palkopoulou (2018)](https://www.pnas.org/doi/10.1073/pnas.1720554115)
:::

## Fitting model parameters (i.e. [ABC](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation))

<center>![](images/abc_scheme.png){width="50%"}</center>

::: aside
Image from [Wikipedia on ABC](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation)
:::

## Ground truth for methods work

<center>![](images/mcmc.png)</center>

::: aside
[Schiffels and Durbin (2014)](https://www.nature.com/articles/ng.3015)
:::

## There are many simulation tools

<br>

The most famous and widely used are [SLiM](https://messerlab.org/slim/) and [*msprime*](https://tskit.dev/msprime/docs/stable/intro.html).

<div>

<br>

Both are very powerful...

... but require quite a bit of programming knowledge\...

... and a lot of code for non-trivial simulations (üêõü™≤üêú).

</div>

::: fragment
<br>

<center>**This is why we will focus on [*slendr*](http://www.slendr.net),**<br>a new R interface for popgen modeling.</center>
:::

## 

<center>

![](images/slendr_logo.png){width="30%"}

<br>

<h2>[www.slendr.net](https://www.slendr.net)</h2>

</center>

## Why a new package? -- spatial simulations!

::: fragment
<center>![](images/animation.gif){width="70%"}</center>
:::

## Why a new package?

. . .

-   Most researchers are not expert programmers

-   All but the most trivial simulations require lots of code

. . .

-   90% <citation needed> of simulations are basically the same!

    -   create populations (splits and $N_e$ changes)

    -   specify gene flow (admixture rates and times)

    -   save output (VCF, EIGENSTRAT)

. . .

-   Lot of code duplication across projects

# Motto of _slendr_

<div>

<h2>"Solve 80% of modeling in popgen with 20% effort."</h2>

</div>

# Let's get started

## We will need *slendr* & *tidyverse*

<br>

```{r}
#| cache: false
# load Martin's favourite data analysis packages
library(dplyr)     
library(ggplot2)
```

<br>

```{r}
# load slendr itself
library(slendr)

# setup slendr's internal machinery
# (you must run `setup_env()` first!)
init_env()
```

::: aside
You can safely ignore the message about missing SLiM.
:::

## Typical steps (outline of this tutorial)

<br>

1.  create populations
2.  schedule population splits
3.  program $N_e$ size changes
4.  specify gene-flow events
5.  simulate sequence data
6.  compute statistics

## Creating a `population()`

Each needs a name, size and time of appearance (i.e., "split"):

```{r}
pop1 <- population("pop1", N = 1000, time = 1)
```

. . .

<br>

This creates a normal R object. Typing it in R gives us:

```{r}
pop1
```

## Programming population splits

Splits are indicated by the `parent = <pop>` argument:

```{r}
pop2 <- population("pop2", N = 100, time = 50, parent = pop1)
```

. . .

<br>

The split is reported in the "historical summary":

```{r}
pop2
```

## Scheduling resize events -- `resize()`

Step size decrease:

```{r}
#| code-line-numbers: "1|2"
pop1 <- population("pop1", N = 1000, time = 1)
pop1_step <- resize(pop1, N = 100, time = 500, how = "step")
```

. . .

Exponential increase:

```{r}
pop2 <- population("pop2", N = 100, time = 50, parent = pop1)
pop2_exp <- resize(pop2, N = 10000, time = 500, end = 2000, how = "exponential")
```

## Tidyverse-style [pipe](https://magrittr.tidyverse.org) `%>%` interface

A more concise way to express the same thing.

Step size decrease:

```{r}
pop1 <-
  population("pop1", N = 1000, time = 1) %>%
  resize(N = 100, time = 500, how = "step")
```

Exponential increase:

```{r}
pop2 <-
  population("pop2", N = 1000, time = 1) %>%
  resize(N = 10000, time = 500, end = 2000, how = "exponential")
```

## A more complex model

```{r}
pop1 <- population("pop1", N = 1000, time = 1)

pop2 <-
  population("pop2", N = 1000, time = 300, parent = pop1) %>%
  resize(N = 100, how = "step", time = 1000)

pop3 <-
  population("pop3", N = 1000, time = 400, parent = pop2) %>%
  resize(N = 2500, how = "step", time = 800)

pop4 <-
  population("pop4", N = 1500, time = 500, parent = pop3) %>%
  resize(N = 700, how = "exponential", time = 1200, end = 2000)

pop5 <-
  population("pop5", N = 100, time = 600, parent = pop4) %>%
  resize(N = 50, how = "step", time = 900) %>%
  resize(N = 250, how = "step", time = 1200) %>%
  resize(N = 1000, how = "exponential", time = 1600, end = 2200) %>%
  resize(N = 400, how = "step", time = 2400)
```

## Last step before simulation: `compile_model()`

<br>

```{r}
model <- compile_model(
  list(pop1, pop2, pop3, pop4, pop5),
  generation_time = 1,
  simulation_length = 3000
)
```

<br>

<center>**Compilation takes a list of model components, performs internal consistency checks, returns a single model object.**</center>

::: aside
The model is also compiled to disk which gives a nice additional layer of reproducibility. The exact location can be specified via `path =` argument to `compile_model()`.
:::

## Model summary

Again, typing the model into R prints a brief summary:

```{r}
model
```

## Model visualization

```{r}
#| fig-width: 7
#| fig-align: center
plot_model(model)
```

# Exercise #1

## Exercise #1 --- write your own model!

::: columns
::: {.column width="50%"}
::: fragment
You can use this "template":

```{r}
#| eval: false
library(slendr)
init_env()

chimp <- population(...)
# <... rest of your code ...>

model <- compile_model(
  populations = list(chimp, ...),
  generation_time = 30
)

plot_model(model) # verify visually
```
:::
:::

::: {.column width="50%"}
![](images/intro_model1.png)
:::
:::

::: aside
Don't worry about gene flow just yet. We will add that at a later stage.

Feel free to include expansions and contractions (maybe in EUR at some point?).
:::

# Exercise #1 --- solution

Solution is on GitHub at [this](https://github.com/bodkan/globe-slendr-2023-03-22/tree/main/solutions/ex1.R) link.

# Simulations!

## Simulating data

We have a compiled `model` R object, how do we simulate data?

. . .

*slendr* has two built-in simulation engines:

-   SLiM engine written [in Eidos/SLiM](https://github.com/bodkan/slendr/blob/main/inst/scripts/script.slim) (`slim()`)
-   *msprime* engine written [in Python](https://github.com/bodkan/slendr/blob/main/inst/scripts/script.py) (`msprime()`)

. . .

<center>

<h4>**You don't have to write any *msprime* or SLiM code!**</h4>

</center>

. . .

<br> This is all that's needed to simulate data from a `model`:

```{r}
#| eval: false
ts <- msprime(model, sequence_length = 100e6, recombination_rate = 1e-8)
```

`ts` is a so-called **tree sequence**.

# The output of a *slendr* simulation is a **tree sequence**

## What is a tree sequence? (see [tskit](https://tskit.dev))

![](images/tree_sequence_diagram.png){width="80%" fig-align="center"}

-   a record of full genetic ancestry of a set of samples
-   an encoding of DNA sequence carried by those samples
-   an efficient analysis framework

# Why tree sequence?

<br>

<h3>Why not VCF, EIGENSTRAT, etc.?</h3>

## What we usually have

<center>![](images/vcf_screenshot.png){width="90%"}</center>

## What we usually *want*

(As full as possible) a representation of our samples' history:

<center>![](images/tree_sequence_diagram.png)</center>

::: fragment
<center>**This is exactly what a tree sequence *is*.**</center>
:::

## Mutation can be done *after* simulation!

If we have a simulated tree-sequence object `ts`, we can do:

```{r}
#| eval: false
ts_mutated <- ts_mutate(ts, mutation_rate = 1e-8)
```

. . .

<br>Or, with a shortcut:

```{r}
#| eval: false
ts <-
  msprime(model, sequence_length = 100e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)
```

<br>

<center>**We will be using `ts_mutate()` throughout.**</center>

## Let's take the `model` from earlier...

```{r}
#| fig-align: center
#| echo: false
plot_model(model)
```

## ... and simulate tree sequence from it

<br>

```{r}
ts <- msprime(model, sequence_length = 10e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)
```

This simulates 1 Mb of sequence, with given rates of recombination and mutation.

<br>

::: aside
A tree sequence can be saved to disk with `ts_save()`.
:::

# What can we do with it?

## Conversion to other file formats

If you have a tree-sequence object `ts`, you can do...

```{r}
#| eval: false
ts_vcf(ts, path = "path/to/a/file.vcf.gz")
```

```{r}
#| eval: false
ts_eigenstrat(ts, prefix = "path/to/eigenstrat/prefix")
```

```{r}
#| echo: false
ts_tmp <- ts
ts <- ts_simplify(ts, simplify_to = c("pop1_1", "pop2_1"))
```

```{r}
#| output-location: fragment
ts_genotypes(ts)
```

```{r}
#| echo: false
ts <- ts_tmp
```

## *slendr*'s R interface to [*tskit*](https://tskit.dev/tskit)

<center>

![](images/slendr_tskit.png)

This [R interface](https://www.slendr.net/reference/index.html#tree-sequence-loading-and-processing) links to Python methods implemented in [*tskit*](https://tskit.dev/tskit/docs/stable/python-api.html#statistics).

</center>

## We need to refer to "samples"

Each individual in *slendr* has a symbolic name and other metadata stored in the tree-sequence object.

```{r}
#| fig-align: center
#| echo: false
#| fig-width: 8
plot_model(model)
```

## Extracting sample information

If we have a tree sequence `ts`, then we can get samples stored in it via `ts_samples()`:

::: columns
::: {.column width="55%"}
::: fragment
```{r}
ts_samples(ts)
```
:::
:::

::: {.column width="2%"}
¬†
:::

::: {.column width="43%"}
::: fragment
```{r}
ts_samples(ts) %>% count(pop)
```
:::
:::
:::

## Popgen statistics in _slendr_

::: columns
::: {.column width="50%"}
![](images/slendr_ts_functions.png)
:::

::: {.column width="50%"}
These functions work with:

-   vectors of names (single population)
-   lists of vectors of names (multiple populations)

The first argument is *always* a `ts` object.
:::
:::

. . .

```{r}
#| eval: false
#| code-line-numbers: "1|2-4"
ts_f3(ts, A = "popA_1", B = c("popB_1", "popB_2"), C = "outgroup_1")
ts_diversity(ts, sample_sets = list(A = c("popA_1", "popA_2", "popA_3"),
                                    B = c("popB_1", "popB_2", "popB_3"),
                                    C = c("popB_1", "popB_2")))
```

# Exercise #2 --- popgen statistics

## Exercise #2 --- popgen statistics

![](images/intro_model1.png){fig-align="center" width="70%"}

## Exercise #2 --- popgen statistics

```{r}
#| echo: false
library(slendr)
init_env()

chimp <- population("CHIMP", time = 7e6, N = 5000)
afr <- population("AFR", parent = chimp, time = 6e6, N = 15000)
eur <- population("EUR", parent = afr, time = 70e3, N = 3000)
nea <- population("NEA", parent = afr, time = 600e3, N = 1000)

model <- compile_model(
  populations = list(chimp, nea, afr, eur),
  generation_time = 30
)

```

```{r}
#| echo: false
#| fig-align: center
plot_model(model)
```

## Exercise #2 --- popgen statistics

Simulate a tree sequence using `msprime()` from your model (perhaps 50Mb?), add mutations with `ts_mutate()`. Inspect its contents using `ts_samples()`.

<hr>

Compute [diversity ($\pi$)](https://en.wikipedia.org/wiki/Nucleotide_diversity) in each population (`ts_diversity()`). Do your results fit $N_e$ in your model?

<hr>

Compute `ts_divergence()` (genetic divergence) or `ts_fst()` ([$F_{ST}$](https://en.wikipedia.org/wiki/Fixation_index)) between pairs of populations. Do the results match the order of splits in your model?

::: aside
*Hint:* See [manual page](https://www.slendr.net/reference/index.html#tree-sequence-statistics) of each tree-sequence statistic function for notes on how to use it.
:::

## Exercise #2 --- popgen statistics

An R trick for using names of samples in `ts_*()` functions:

::: columns
::: {.column width="40%"}
```{r}
ts_samples(ts)
```
:::

::: {.column width="60%"}
::: fragment
```{r}
# get a list of lists of individual names
samples <- ts_samples(ts) %>%
  split(., .$pop) %>%
  lapply(pull, "name")
```

::: fragment
```{r}
str(samples)
```
:::

::: fragment
```{r}
head(samples$pop1, 3)
```
:::
:::
:::
:::

# Exercise #2 --- solution

Solution is on GitHub at [this](https://github.com/bodkan/globe-slendr-2023-03-22/tree/main/solutions/ex2.R) link.

# Gene flow / admixture

## `gene_flow()` events

Gene flow is programmed the `gene_flow()` function.

<br>

If we have `p1` and `p2`, we schedule gene flow with:

```{r}
#| eval: false
gf <- gene_flow(from = p1, to = p2, start = 500, end = 600, rate = 0.13)
```

. . .

Multiple gene-flow events can be gathered in a list:

```{r}
#| eval: false
gf <- list(
  gene_flow(from = p1, to = p2, start = 500, end = 600, rate = 0.13),
  gene_flow(from = <..>, to = <..>, start = <...>, end = <...>, rate = <...>),
  < potentially many more ... >
)
```

. . .

<br>

<center>**`gene_flow()` checks for consistency!**</center>

## Adding gene flow(s) to the model

<br> <br>

```{r}
#| eval: false
#| code-line-numbers: "|6|10"
library(slendr)
init_env()

<... your definitions of populations ...>
  
gf <- gene_flow(from = ..., to = ..., <start, end, rate>)

model <- compile_model(
  populations = list(...),
  gene_flow = gf,           # <--- gene flow specified above
  generation_time = 30
)

ts <- <... simulating a tree sequence ....>
```

# Exercise #3

## Exercise #3a --- adding `gene_flow()`

Add introgression into your Exercise #1 model (5% pulse NEA -\> EUR over 55-50 kya) and simulate a tree sequence from it.

![](images/intro_model1.png){fig-align="center" width="70%"}

## Exercise #3a --- adding `gene_flow()`

Add introgression into your Exercise #1 model (5% pulse NEA -\> EUR over 55-50 kya) and simulate a tree sequence from it.

![](images/intro_model2.png){fig-align="center" width="70%"}

## Exercise #3b --- detect introgression

Pretend that you don't know whether or not you simulated Neanderthal introgression in your model.

<hr>

Test for the evidence of Neanderthal ancestry in Europeans vs Africans using the $f_4$-statistic implemented `ts_f4()`.

::: aside
*Hint*: $f_4$ (W = AFR, X = EUR; Y = NEAND, Z = CHIMP) is the test setup where the null hypothesis states that the value of this statistic is "consistent with zero". "Significantly negative value" indicates gene flow NEAND-EUR.

You can run the test on single individuals from each population but the signal will be clearer if you compute the $f_4$ on \~20 Africans and Europeans.
:::

# Exercise #3 --- solution

Solution is on GitHub at [this](https://github.com/bodkan/globe-slendr-2023-03-22/tree/main/solutions/ex3.R) link.




# Time-series data

## Sampling aDNA samples through time

<br>

Imagine we have `pop1`, `pop2`, ... compiled in a `model`.

<br>

. . .

To record *ancient* individuals in the tree sequence, we can use the function `schedule_sampling()`:

. . .

```{r}
#| eval: false
schedule_sampling(
  model,                # compiled slendr model object
  times = c(100, 500),  # at these times (can be also a single number) ...
  list(pop1, 42),       # ... sample 42 individuals from pop1
  list(pop2, 10),       # ... sample 10 individuals from pop2
  list(pop3, 1)         # ... sample 1 individual from pop 3
) 
```

## Sampling schedule format

The output of `schedule_sampling()` is a plain data frame:

```{r}
schedule_sampling(model, times = c(40000, 30000, 20000, 10000), list(eur, 1))
```

. . .

We can bind multiple sampling schedules together, giving us finer control about sampling:

```{r}
eur_samples <- schedule_sampling(model, times = c(40000, 30000, 20000, 10000, 0), list(eur, 1))
afr_samples <- schedule_sampling(model, times = 0, list(afr, 1))

samples <- rbind(eur_samples, afr_samples)
```

## How to use a sampling schedule?

To sample individuals based on a given schedule, we use the `samples =` argument of the `msprime()` functions:

```{r}
ts <- msprime(model, samples = samples, sequence_length = 1e6, recombination_rate = 1e-8)
```

. . .

We can verify that only specific individuals are recorded:

::: columns
::: {.column width="40%"}
```{r}
ts_samples(ts)
```
:::

::: {.column width="60%"}
::: fragment
```{r}
ts
```
:::
:::
:::

# Exercise #4

## Exercise #4a --- ancient samples

```{r}
#| echo: false
chimp <- population("CHIMP", time = 7e6, N = 5000)
afr <- population("AFR", parent = chimp, time = 6e6, N = 15000)
eur <- population("EUR", parent = afr, time = 70e3, N = 3000)
nea <- population("NEA", parent = afr, time = 600e3, N = 1000, remove = 40e3)

gf <- gene_flow(from = nea, to = eur, rate = 0.05, start = 55000, end = 50000)

model <- compile_model(
  populations = list(chimp, nea, afr, eur),
  gene_flow = gf,
  generation_time = 30
)

plot_model(model, proportions = TRUE)
```

## Exercise #4a --- ancient samples

Simulate data from your `model` using this sampling:

-   one present-day CHIMP
-   20 present-day EUR and AFR individuals
-   1 NEA at 70 ky, 1 NEA at 40 ky
-   1 EUR every 1000 years between 50-5 kya

*Hint*: you can do this by:

```{r}
#| eval: false
samples <- # rbind(...) together individual schedule_sampling() data frames

ts <-
  msprime(model, samples = samples, sequence_length = 100e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)
```

## Exercise #4b --- $f_4$-ratio statistic

Use $f_4$-ratio statistic to replicate the [following figure](https://www.pnas.org/doi/10.1073/pnas.1814338116#fig01):

![](images/neand_decline.png){width="60%" fig-align="center"}

::: aside
_Hint_: You can compute Neanderthal ancestry for a vector of individual names `X` as `ts_f4ratio(ts, X = X, "NEA_1", "NEA_2", "AFR_1", "CHIMP_1")` ("direct f4-ratio" from [Petr _et al_., PNAS 2019](https://www.pnas.org/doi/full/10.1073/pnas.1814338116)).
:::

# Exercise #4 --- solution

Solution is on GitHub at [this](https://github.com/bodkan/globe-slendr-2023-03-22/tree/main/solutions/ex4.R) link.

## More information

<br>

-   *slendr* paper on [bioRxiv](https://www.biorxiv.org/content/10.1101/2022.03.20.485041v3)

-   documentation tutorials can be found [here](https://www.slendr.net)

-   GitHub repo (bug reports!) is [here](http://github.com/bodkan/slendr)

<hr>

-   new R package for ABC modeling [*demografr*](http://github.com/bodkan/demografr)

<hr>

<br>
<center>**For questions, reach out at <u>mp@bodkan.net</u>!**</center>
